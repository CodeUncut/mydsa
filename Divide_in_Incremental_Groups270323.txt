Divide in Incremental Groups ?

Given two integers N and K, the task is to count the number of ways to divide N into K groups of positive integers such that their sum is N and the number of elements in groups follows a non-decreasing order (i.e. group[i] <= group[i+1]).

Example 1:

Input:
N = 8
K = 4
Output:
5
Explanation:
There are 5 groups such that their sum is 8 
and the number of positive integers in each 
group is 4. The 5 groups are [1, 1, 1, 5], 
[1, 1, 2, 4], [1, 1, 3, 3], [1, 2, 2, 3] and 
[2, 2, 2, 2].
Example 2:

Input: 
N = 4
K = 3
Output:
1
Explanation: 
The only possible grouping is {1, 1, 2}. Hence,
the answer is 1 in this case.

// Answer

class Solution {
  public:
    const int mod = 1e9 + 7;
    int dp[105][105][105];
    
    int countWaystoDivide(int n, int k) {
        // Code here
        memset(dp, -1, sizeof(dp));
        return solve(n, k, n);
    }
    int solve(int n, int k, int last) {
    if (k == 0) 
    {
        return (n == 0) ? 1 : 0;
    }

    if (dp[n][k][last] != -1) 
    {
        return dp[n][k][last];
        
    }

    int answer = 0;
    for (int s = 1; s <= min(n, last); s++)
    {
        answer += solve(n - s, k - 1, s);
        answer %= mod;
    }

    return dp[n][k][last] = answer;
    }
};